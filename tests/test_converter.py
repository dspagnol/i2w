import abc
import collections.abc
import unittest

from src.i2w.converter import Converter


class Localized(abc.ABC):

    @abc.abstractmethod
    def get_locale(self) -> str: ...


class AmericanEnglish(Localized):

    def get_locale(self) -> str:
        return 'en_US'


class Spanish(Localized):

    def get_locale(self) -> str:
        return 'es_ES'


class EuropeanFrench(Localized):

    def get_locale(self) -> str:
        return 'fr_FR'


class BelgiumFrench(Localized):

    def get_locale(self) -> str:
        return 'fr_BE'


class SwissFrench(Localized):

    def get_locale(self) -> str:
        return 'fr_CH'


class CanadianFrench(Localized):

    def get_locale(self) -> str:
        return 'fr_CA'


class EuropeanPortuguese(Localized):

    def get_locale(self) -> str:
        return 'pt_PT'


class BrazilianPortuguese(Localized):

    def get_locale(self) -> str:
        return 'pt_BR'


class SequentialNumbersTest(Localized):

    def test(self):
        converter = Converter(self.get_locale())
        (i, names) = self.get_test_data()
        for name in names:
            self.assertEqual(converter.to_words(i=i), name, f'i = {i}')
            i += 1

    @abc.abstractmethod
    def get_test_data(self) -> tuple[int, list[str]]:
        ...


class AmericanEnglishSmallNumbersTest(AmericanEnglish, SequentialNumbersTest, unittest.TestCase):

    def get_test_data(self) -> tuple[int, list[str]]:
        return (-2, [
            'minus two',
            'minus one',
            'zero',
            'one',
            'two',
            'three',
            'four',
            'five',
            'six',
            'seven',
            'eight',
            'nine',
            'ten',
            'eleven',
            'twelve',
            'thirteen',
            'fourteen',
            'fifteen',
            'sixteen',
            'seventeen',
            'eighteen',
            'nineteen',
            'twenty',
            'twenty-one',
            'twenty-two',
            'twenty-three',
            'twenty-four',
            'twenty-five',
            'twenty-six',
            'twenty-seven',
            'twenty-eight',
            'twenty-nine',
            'thirty',
            'thirty-one',
            'thirty-two',
            'thirty-three',
            'thirty-four',
            'thirty-five',
            'thirty-six',
            'thirty-seven',
            'thirty-eight',
            'thirty-nine',
            'forty',
            'forty-one',
            'forty-two',
            'forty-three',
            'forty-four',
            'forty-five',
            'forty-six',
            'forty-seven',
            'forty-eight',
            'forty-nine',
            'fifty',
            'fifty-one',
            'fifty-two',
            'fifty-three',
            'fifty-four',
            'fifty-five',
            'fifty-six',
            'fifty-seven',
            'fifty-eight',
            'fifty-nine',
            'sixty',
            'sixty-one',
            'sixty-two',
            'sixty-three',
            'sixty-four',
            'sixty-five',
            'sixty-six',
            'sixty-seven',
            'sixty-eight',
            'sixty-nine',
            'seventy',
            'seventy-one',
            'seventy-two',
            'seventy-three',
            'seventy-four',
            'seventy-five',
            'seventy-six',
            'seventy-seven',
            'seventy-eight',
            'seventy-nine',
            'eighty',
            'eighty-one',
            'eighty-two',
            'eighty-three',
            'eighty-four',
            'eighty-five',
            'eighty-six',
            'eighty-seven',
            'eighty-eight',
            'eighty-nine',
            'ninety',
            'ninety-one',
            'ninety-two',
            'ninety-three',
            'ninety-four',
            'ninety-five',
            'ninety-six',
            'ninety-seven',
            'ninety-eight',
            'ninety-nine',
            'one hundred',
            'one hundred one',
            'one hundred two',
        ])


class SpanishSmallNumbersTest(Spanish, SequentialNumbersTest, unittest.TestCase):

    def get_test_data(self) -> tuple[int, list[str]]:
        return (-2, [
            "menos dos",
            "menos uno",
            "cero",
            "uno",
            "dos",
            "tres",
            "cuatro",
            "cinco",
            "seis",
            "siete",
            "ocho",
            "nueve",
            "diez",
            "once",
            "doce",
            "trece",
            "catorce",
            "quince",
            "dieciséis",
            "diecisiete",
            "dieciocho",
            "diecinueve",
            "veinte",
            "veintiuno",
            "veintidós",
            "veintitrés",
            "veinticuatro",
            "veinticinco",
            "veintiséis",
            "veintisiete",
            "veintiocho",
            "veintinueve",
            "treinta",
            "treinta y uno",
            "treinta y dos",
            "treinta y tres",
            "treinta y cuatro",
            "treinta y cinco",
            "treinta y seis",
            "treinta y siete",
            "treinta y ocho",
            "treinta y nueve",
            "cuarenta",
            "cuarenta y uno",
            "cuarenta y dos",
            "cuarenta y tres",
            "cuarenta y cuatro",
            "cuarenta y cinco",
            "cuarenta y seis",
            "cuarenta y siete",
            "cuarenta y ocho",
            "cuarenta y nueve",
            "cincuenta",
            "cincuenta y uno",
            "cincuenta y dos",
            "cincuenta y tres",
            "cincuenta y cuatro",
            "cincuenta y cinco",
            "cincuenta y seis",
            "cincuenta y siete",
            "cincuenta y ocho",
            "cincuenta y nueve",
            "sesenta",
            "sesenta y uno",
            "sesenta y dos",
            "sesenta y tres",
            "sesenta y cuatro",
            "sesenta y cinco",
            "sesenta y seis",
            "sesenta y siete",
            "sesenta y ocho",
            "sesenta y nueve",
            "setenta",
            "setenta y uno",
            "setenta y dos",
            "setenta y tres",
            "setenta y cuatro",
            "setenta y cinco",
            "setenta y seis",
            "setenta y siete",
            "setenta y ocho",
            "setenta y nueve",
            "ochenta",
            "ochenta y uno",
            "ochenta y dos",
            "ochenta y tres",
            "ochenta y cuatro",
            "ochenta y cinco",
            "ochenta y seis",
            "ochenta y siete",
            "ochenta y ocho",
            "ochenta y nueve",
            "noventa",
            "noventa y uno",
            "noventa y dos",
            "noventa y tres",
            "noventa y cuatro",
            "noventa y cinco",
            "noventa y seis",
            "noventa y siete",
            "noventa y ocho",
            "noventa y nueve",
            "cien",
            "ciento uno",
            "ciento dos",
        ])


class EuropeanFrenchSmallNumbersTest(EuropeanFrench, SequentialNumbersTest, unittest.TestCase):

    def get_test_data(self) -> tuple[int, list[str]]:
        return (-2, [
            'moins deux',
            'moins un',
            'zéro',
            'un',
            'deux',
            'trois',
            'quatre',
            'cinq',
            'six',
            'sept',
            'huit',
            'neuf',
            'dix',
            'onze',
            'douze',
            'treize',
            'quatorze',
            'quinze',
            'seize',
            'dix-sept',
            'dix-huit',
            'dix-neuf',
            'vingt',
            'vingt-et-un',
            'vingt-deux',
            'vingt-trois',
            'vingt-quatre',
            'vingt-cinq',
            'vingt-six',
            'vingt-sept',
            'vingt-huit',
            'vingt-neuf',
            'trente',
            'trente-et-un',
            'trente-deux',
            'trente-trois',
            'trente-quatre',
            'trente-cinq',
            'trente-six',
            'trente-sept',
            'trente-huit',
            'trente-neuf',
            'quarante',
            'quarante-et-un',
            'quarante-deux',
            'quarante-trois',
            'quarante-quatre',
            'quarante-cinq',
            'quarante-six',
            'quarante-sept',
            'quarante-huit',
            'quarante-neuf',
            'cinquante',
            'cinquante-et-un',
            'cinquante-deux',
            'cinquante-trois',
            'cinquante-quatre',
            'cinquante-cinq',
            'cinquante-six',
            'cinquante-sept',
            'cinquante-huit',
            'cinquante-neuf',
            'soixante',
            'soixante-et-un',
            'soixante-deux',
            'soixante-trois',
            'soixante-quatre',
            'soixante-cinq',
            'soixante-six',
            'soixante-sept',
            'soixante-huit',
            'soixante-neuf',
            'soixante-dix',
            'soixante-et-onze',
            'soixante-douze',
            'soixante-treize',
            'soixante-quatorze',
            'soixante-quinze',
            'soixante-seize',
            'soixante-dix-sept',
            'soixante-dix-huit',
            'soixante-dix-neuf',
            'quatre-vingts',
            'quatre-vingt-un',
            'quatre-vingt-deux',
            'quatre-vingt-trois',
            'quatre-vingt-quatre',
            'quatre-vingt-cinq',
            'quatre-vingt-six',
            'quatre-vingt-sept',
            'quatre-vingt-huit',
            'quatre-vingt-neuf',
            'quatre-vingt-dix',
            'quatre-vingt-onze',
            'quatre-vingt-douze',
            'quatre-vingt-treize',
            'quatre-vingt-quatorze',
            'quatre-vingt-quinze',
            'quatre-vingt-seize',
            'quatre-vingt-dix-sept',
            'quatre-vingt-dix-huit',
            'quatre-vingt-dix-neuf',
            'cent',
            'cent-un',
            'cent-deux',
        ])


class BelgiumFrenchSmallNumbersTest(BelgiumFrench, SequentialNumbersTest, unittest.TestCase):

    def get_test_data(self) -> tuple[int, list[str]]:
        return (-2, [
            'moins deux',
            'moins un',
            'zéro',
            'un',
            'deux',
            'trois',
            'quatre',
            'cinq',
            'six',
            'sept',
            'huit',
            'neuf',
            'dix',
            'onze',
            'douze',
            'treize',
            'quatorze',
            'quinze',
            'seize',
            'dix-sept',
            'dix-huit',
            'dix-neuf',
            'vingt',
            'vingt-et-un',
            'vingt-deux',
            'vingt-trois',
            'vingt-quatre',
            'vingt-cinq',
            'vingt-six',
            'vingt-sept',
            'vingt-huit',
            'vingt-neuf',
            'trente',
            'trente-et-un',
            'trente-deux',
            'trente-trois',
            'trente-quatre',
            'trente-cinq',
            'trente-six',
            'trente-sept',
            'trente-huit',
            'trente-neuf',
            'quarante',
            'quarante-et-un',
            'quarante-deux',
            'quarante-trois',
            'quarante-quatre',
            'quarante-cinq',
            'quarante-six',
            'quarante-sept',
            'quarante-huit',
            'quarante-neuf',
            'cinquante',
            'cinquante-et-un',
            'cinquante-deux',
            'cinquante-trois',
            'cinquante-quatre',
            'cinquante-cinq',
            'cinquante-six',
            'cinquante-sept',
            'cinquante-huit',
            'cinquante-neuf',
            'soixante',
            'soixante-et-un',
            'soixante-deux',
            'soixante-trois',
            'soixante-quatre',
            'soixante-cinq',
            'soixante-six',
            'soixante-sept',
            'soixante-huit',
            'soixante-neuf',
            'septante',
            'septante-et-un',
            'septante-deux',
            'septante-trois',
            'septante-quatre',
            'septante-cinq',
            'septante-six',
            'septante-sept',
            'septante-huit',
            'septante-neuf',
            'quatre-vingts',
            'quatre-vingt-un',
            'quatre-vingt-deux',
            'quatre-vingt-trois',
            'quatre-vingt-quatre',
            'quatre-vingt-cinq',
            'quatre-vingt-six',
            'quatre-vingt-sept',
            'quatre-vingt-huit',
            'quatre-vingt-neuf',
            'nonante',
            'nonante-et-un',
            'nonante-deux',
            'nonante-trois',
            'nonante-quatre',
            'nonante-cinq',
            'nonante-six',
            'nonante-sept',
            'nonante-huit',
            'nonante-neuf',
            'cent',
            'cent-un',
            'cent-deux',
        ])

class SwissFrenchSmallNumbersTest(SwissFrench, SequentialNumbersTest, unittest.TestCase):

    def get_test_data(self) -> tuple[int, list[str]]:
        return (-2, [
            'moins deux',
            'moins un',
            'zéro',
            'un',
            'deux',
            'trois',
            'quatre',
            'cinq',
            'six',
            'sept',
            'huit',
            'neuf',
            'dix',
            'onze',
            'douze',
            'treize',
            'quatorze',
            'quinze',
            'seize',
            'dix-sept',
            'dix-huit',
            'dix-neuf',
            'vingt',
            'vingt-et-un',
            'vingt-deux',
            'vingt-trois',
            'vingt-quatre',
            'vingt-cinq',
            'vingt-six',
            'vingt-sept',
            'vingt-huit',
            'vingt-neuf',
            'trente',
            'trente-et-un',
            'trente-deux',
            'trente-trois',
            'trente-quatre',
            'trente-cinq',
            'trente-six',
            'trente-sept',
            'trente-huit',
            'trente-neuf',
            'quarante',
            'quarante-et-un',
            'quarante-deux',
            'quarante-trois',
            'quarante-quatre',
            'quarante-cinq',
            'quarante-six',
            'quarante-sept',
            'quarante-huit',
            'quarante-neuf',
            'cinquante',
            'cinquante-et-un',
            'cinquante-deux',
            'cinquante-trois',
            'cinquante-quatre',
            'cinquante-cinq',
            'cinquante-six',
            'cinquante-sept',
            'cinquante-huit',
            'cinquante-neuf',
            'soixante',
            'soixante-et-un',
            'soixante-deux',
            'soixante-trois',
            'soixante-quatre',
            'soixante-cinq',
            'soixante-six',
            'soixante-sept',
            'soixante-huit',
            'soixante-neuf',
            'septante',
            'septante-et-un',
            'septante-deux',
            'septante-trois',
            'septante-quatre',
            'septante-cinq',
            'septante-six',
            'septante-sept',
            'septante-huit',
            'septante-neuf',
            'huitante',
            'huitante-et-un',
            'huitante-deux',
            'huitante-trois',
            'huitante-quatre',
            'huitante-cinq',
            'huitante-six',
            'huitante-sept',
            'huitante-huit',
            'huitante-neuf',
            'nonante',
            'nonante-et-un',
            'nonante-deux',
            'nonante-trois',
            'nonante-quatre',
            'nonante-cinq',
            'nonante-six',
            'nonante-sept',
            'nonante-huit',
            'nonante-neuf',
            'cent',
            'cent-un',
            'cent-deux',
        ])


class CanadianFrenchSmallNumbersTest(CanadianFrench, SequentialNumbersTest, unittest.TestCase):

    def get_test_data(self) -> tuple[int, list[str]]:
        return (-2, [
            'moins deux',
            'moins un',
            'zéro',
            'un',
            'deux',
            'trois',
            'quatre',
            'cinq',
            'six',
            'sept',
            'huit',
            'neuf',
            'dix',
            'onze',
            'douze',
            'treize',
            'quatorze',
            'quinze',
            'seize',
            'dix-sept',
            'dix-huit',
            'dix-neuf',
            'vingt',
            'vingt et un',
            'vingt-deux',
            'vingt-trois',
            'vingt-quatre',
            'vingt-cinq',
            'vingt-six',
            'vingt-sept',
            'vingt-huit',
            'vingt-neuf',
            'trente',
            'trente et un',
            'trente-deux',
            'trente-trois',
            'trente-quatre',
            'trente-cinq',
            'trente-six',
            'trente-sept',
            'trente-huit',
            'trente-neuf',
            'quarante',
            'quarante et un',
            'quarante-deux',
            'quarante-trois',
            'quarante-quatre',
            'quarante-cinq',
            'quarante-six',
            'quarante-sept',
            'quarante-huit',
            'quarante-neuf',
            'cinquante',
            'cinquante et un',
            'cinquante-deux',
            'cinquante-trois',
            'cinquante-quatre',
            'cinquante-cinq',
            'cinquante-six',
            'cinquante-sept',
            'cinquante-huit',
            'cinquante-neuf',
            'soixante',
            'soixante et un',
            'soixante-deux',
            'soixante-trois',
            'soixante-quatre',
            'soixante-cinq',
            'soixante-six',
            'soixante-sept',
            'soixante-huit',
            'soixante-neuf',
            'soixante-dix',
            'soixante et onze',
            'soixante-douze',
            'soixante-treize',
            'soixante-quatorze',
            'soixante-quinze',
            'soixante-seize',
            'soixante-dix-sept',
            'soixante-dix-huit',
            'soixante-dix-neuf',
            'quatre-vingts',
            'quatre-vingt-un',
            'quatre-vingt-deux',
            'quatre-vingt-trois',
            'quatre-vingt-quatre',
            'quatre-vingt-cinq',
            'quatre-vingt-six',
            'quatre-vingt-sept',
            'quatre-vingt-huit',
            'quatre-vingt-neuf',
            'quatre-vingt-dix',
            'quatre-vingt-onze',
            'quatre-vingt-douze',
            'quatre-vingt-treize',
            'quatre-vingt-quatorze',
            'quatre-vingt-quinze',
            'quatre-vingt-seize',
            'quatre-vingt-dix-sept',
            'quatre-vingt-dix-huit',
            'quatre-vingt-dix-neuf',
            'cent',
            'cent un',
            'cent deux',
        ])


class BrazilianPortugueseSmallNumbersTest(BrazilianPortuguese, SequentialNumbersTest, unittest.TestCase):

    def get_test_data(self) -> tuple[int, list[str]]:
        return (-2, [
            'menos dois',
            'menos um',
            'zero',
            'um',
            'dois',
            'três',
            'quatro',
            'cinco',
            'seis',
            'sete',
            'oito',
            'nove',
            'dez',
            'onze',
            'doze',
            'treze',
            'quatorze',
            'quinze',
            'dezesseis',
            'dezessete',
            'dezoito',
            'dezenove',
            'vinte',
            'vinte e um',
            'vinte e dois',
            'vinte e três',
            'vinte e quatro',
            'vinte e cinco',
            'vinte e seis',
            'vinte e sete',
            'vinte e oito',
            'vinte e nove',
            'trinta',
            'trinta e um',
            'trinta e dois',
            'trinta e três',
            'trinta e quatro',
            'trinta e cinco',
            'trinta e seis',
            'trinta e sete',
            'trinta e oito',
            'trinta e nove',
            'quarenta',
            'quarenta e um',
            'quarenta e dois',
            'quarenta e três',
            'quarenta e quatro',
            'quarenta e cinco',
            'quarenta e seis',
            'quarenta e sete',
            'quarenta e oito',
            'quarenta e nove',
            'cinquenta',
            'cinquenta e um',
            'cinquenta e dois',
            'cinquenta e três',
            'cinquenta e quatro',
            'cinquenta e cinco',
            'cinquenta e seis',
            'cinquenta e sete',
            'cinquenta e oito',
            'cinquenta e nove',
            'sessenta',
            'sessenta e um',
            'sessenta e dois',
            'sessenta e três',
            'sessenta e quatro',
            'sessenta e cinco',
            'sessenta e seis',
            'sessenta e sete',
            'sessenta e oito',
            'sessenta e nove',
            'setenta',
            'setenta e um',
            'setenta e dois',
            'setenta e três',
            'setenta e quatro',
            'setenta e cinco',
            'setenta e seis',
            'setenta e sete',
            'setenta e oito',
            'setenta e nove',
            'oitenta',
            'oitenta e um',
            'oitenta e dois',
            'oitenta e três',
            'oitenta e quatro',
            'oitenta e cinco',
            'oitenta e seis',
            'oitenta e sete',
            'oitenta e oito',
            'oitenta e nove',
            'noventa',
            'noventa e um',
            'noventa e dois',
            'noventa e três',
            'noventa e quatro',
            'noventa e cinco',
            'noventa e seis',
            'noventa e sete',
            'noventa e oito',
            'noventa e nove',
            'cem',
            'cento e um',
            'cento e dois',
        ])


class MappedNumbersTest(Localized):

    def test(self):
        converter = Converter(self.get_locale())
        data = self.get_test_data()
        f, entries = data
        for (n, name) in entries.items():
            if f:
                i = f(n)
            else:
                i = n
            self.assertEqual(converter.to_words(i=i), name, f'n = {n}')

    @abc.abstractmethod
    def get_test_data(self) -> tuple[collections.abc.Callable[[int], int] | None, dict[int, str]]:
        ...


class AmericanEnglishLargeNumbersTest(AmericanEnglish, MappedNumbersTest, unittest.TestCase):

    def get_test_data(self) -> tuple[collections.abc.Callable[[int], int], dict[int, str]]:
        return (lambda n: pow(10, 3*n + 3), {
            0: 'one thousand',
            1: 'one million',
            2: 'one billion',
            3: 'one trillion',
            4: 'one quadrillion',
            5: 'one quintillion',
            6: 'one sextillion',
            7: 'one septillion',
            8: 'one octillion',
            9: 'one nonillion',
            10: 'one decillion',
            11: 'one undecillion',
            12: 'one duodecillion',
            13: 'one tredecillion',
            14: 'one quattuordecillion',
            15: 'one quindecillion',
            16: 'one sedecillion',
            17: 'one septendecillion',
            18: 'one octodecillion',
            19: 'one novendecillion',
            20: 'one vigintillion',
            21: 'one unvigintillion',
            22: 'one duovigintillion',
            23: 'one tresvigintillion',
            24: 'one quattuorvigintillion',
            25: 'one quinvigintillion',
            26: 'one sesvigintillion',
            27: 'one septemvigintillion',
            28: 'one octovigintillion',
            29: 'one novemvigintillion',
            30: 'one trigintillion',
            31: 'one untrigintillion',
            32: 'one duotrigintillion',
            33: 'one trestrigintillion',
            34: 'one quattuortrigintillion',
            35: 'one quintrigintillion',
            36: 'one sestrigintillion',
            37: 'one septentrigintillion',
            38: 'one octotrigintillion',
            39: 'one noventrigintillion',
            40: 'one quadragintillion',
            50: 'one quinquagintillion',
            60: 'one sexagintillion',
            70: 'one septuagintillion',
            80: 'one octogintillion',
            90: 'one nonagintillion',
            100: 'one centillion',
            101: 'one uncentillion',
            102: 'one duocentillion',
            103: 'one trescentillion',
            110: 'one decicentillion',
            111: 'one undecicentillion',
            120: 'one viginticentillion',
            121: 'one unviginticentillion',
            130: 'one trigintacentillion',
            140: 'one quadragintacentillion',
            150: 'one quinquagintacentillion',
            160: 'one sexagintacentillion',
            170: 'one septuagintacentillion',
            180: 'one octogintacentillion',
            190: 'one nonagintacentillion',
            200: 'one ducentillion',
            300: 'one trecentillion',
            400: 'one quadringentillion',
            500: 'one quingentillion',
            600: 'one sescentillion',
            700: 'one septingentillion',
            800: 'one octingentillion',
            900: 'one nongentillion',
            998: 'one octononagintanongentillion',
            999: 'one novenonagintanongentillion',
            1000: 'one millinillion',
            1001: 'one millimillion',
            1010: 'one millidecillion',
            1011: 'one milliundecillion',
        })


class AmericanEnglishMiscNumbersTest(AmericanEnglish, MappedNumbersTest, unittest.TestCase):

    def get_test_data(self) -> tuple[None, dict[int, str]]:
        return (None, {
            142: 'one hundred forty-two',
            200: 'two hundred',
            1301: 'one thousand three hundred one',
            80000021: 'eighty million twenty-one',
            80000080: 'eighty million eighty',
            1001001001001001: 'one quadrillion one trillion one billion one million one thousand one',
        })


class SpanishMiscNumbersTest(Spanish, MappedNumbersTest, unittest.TestCase):

    def get_test_data(self) -> tuple[None, dict[int, str]]:
        return (None, {
            45: 'cuarenta y cinco',
            91: 'noventa y uno',
            120: 'ciento veinte',
            205: 'doscientos cinco',
            235: 'doscientos treinta y cinco',
            995: 'novecientos noventa y cinco',
            1000: 'mil',
            1528: 'mil quinientos veintiocho',
            1999: 'mil novecientos noventa y nueve',
            2000: 'dos mil',
            2003: 'dos mil tres',
            3000: 'tres mil',
            9058: 'nueve mil cincuenta y ocho',
            10000: 'diez mil',
            10569: 'diez mil quinientos sesenta y nueve',
            20000: 'veinte mil',
            30000: 'treinta mil',
            63519: 'sesenta y tres mil quinientos diecinueve',
            125899: 'ciento veinticinco mil ochocientos noventa y nueve',
            300000: 'trescientos mil',
            600089: 'seiscientos mil ochenta y nueve',
            1000000: 'un millón',
            5638058: 'cinco millones seiscientos treinta y ocho mil cincuenta y ocho',
            2000000: 'dos millones',
            50000000: 'cincuenta millones',
            600000000: 'seiscientos millones',
            1000000000: 'mil millones',
            1000000000000000000: 'un trillón',
        })


class CanadianFrenchLargeNumbersTest(CanadianFrench, MappedNumbersTest, unittest.TestCase):

    def get_test_data(self) -> tuple[collections.abc.Callable[[int], int], dict[int, str]]:
        return (lambda n: pow(10, 6*n), {
            1: 'un million',
            2: 'un billion',
            3: 'un trillion',
            4: 'un quatrillion',
            5: 'un quintillion',
            6: 'un sextillion',
            7: 'un septillion',
            8: 'un octillion',
            9: 'un nonillion',
            10: 'un décillion',
            11: 'un undécillion',
            12: 'un duodécillion',
            13: 'un trédécillion',
            14: 'un quattuordécillion',
            15: 'un quindécillion',
            16: 'un sédécillion',
            17: 'un septendécillion',
            18: 'un octodécillion',
            19: 'un novendécillion',
            20: 'un vigintillion',
            21: 'un unvigintillion',
            22: 'un duovigintillion',
            23: 'un tresvigintillion',
            24: 'un quattuorvigintillion',
            25: 'un quinvigintillion',
            26: 'un sesvigintillion',
            27: 'un septemvigintillion',
            28: 'un octovigintillion',
            29: 'un novemvigintillion',
            30: 'un trigintillion',
            31: 'un untrigintillion',
            32: 'un duotrigintillion',
            33: 'un trestrigintillion',
            34: 'un quattuortrigintillion',
            35: 'un quintrigintillion',
            36: 'un sestrigintillion',
            37: 'un septentrigintillion',
            38: 'un octotrigintillion',
            39: 'un noventrigintillion',
            40: 'un quadragintillion',
            50: 'un quinquagintillion',
            60: 'un sexagintillion',
            70: 'un septuagintillion',
            80: 'un octogintillion',
            90: 'un nonagintillion',
            100: 'un centillion',
            101: 'un uncentillion',
            102: 'un duocentillion',
            103: 'un trescentillion',
            110: 'un décicentillion',
            111: 'un undécicentillion',
            120: 'un viginticentillion',
            121: 'un unviginticentillion',
            130: 'un trigintacentillion',
            140: 'un quadragintacentillion',
            150: 'un quinquagintacentillion',
            160: 'un sexagintacentillion',
            170: 'un septuagintacentillion',
            180: 'un octogintacentillion',
            190: 'un nonagintacentillion',
            200: 'un ducentillion',
            300: 'un trecentillion',
            400: 'un quadringentillion',
            500: 'un quingentillion',
            600: 'un sescentillion',
            700: 'un septingentillion',
            716: 'un sédéciseptingentillion',
            717: 'un septendéciseptingentillion',  # exceeds Python default limit for integer string conversion (4300 digits)
            800: 'un octingentillion',
            900: 'un nongentillion',
            998: 'un octononagintanongentillion',
            999: 'un novénonagintanongentillion',
            1000: 'un millinillion',
            1001: 'un millimillion',
            1010: 'un millidécillion',
            1011: 'un milliundécillion',
        })


class CanadianFrenchLargeNumbers2Test(CanadianFrench, MappedNumbersTest, unittest.TestCase):

    def get_test_data(self) -> tuple[collections.abc.Callable[[int], int], dict[int, str]]:
        return (lambda n: pow(10, 6*n + 3), {
            1: 'un milliard',
            2: 'un billiard',
            3: 'un trilliard',
            4: 'un quatrilliard',
            5: 'un quintilliard',
            6: 'un sextilliard',
            7: 'un septilliard',
            8: 'un octilliard',
            9: 'un nonilliard',
            10: 'un décilliard',
            11: 'un undécilliard',
            12: 'un duodécilliard',
            13: 'un trédécilliard',
            14: 'un quattuordécilliard',
            15: 'un quindécilliard',
            16: 'un sédécilliard',
            17: 'un septendécilliard',
            18: 'un octodécilliard',
            19: 'un novendécilliard',
            20: 'un vigintilliard',
            21: 'un unvigintilliard',
            22: 'un duovigintilliard',
            23: 'un tresvigintilliard',
            24: 'un quattuorvigintilliard',
            25: 'un quinvigintilliard',
            26: 'un sesvigintilliard',
            27: 'un septemvigintilliard',
            28: 'un octovigintilliard',
            29: 'un novemvigintilliard',
            30: 'un trigintilliard',
            31: 'un untrigintilliard',
            32: 'un duotrigintilliard',
            33: 'un trestrigintilliard',
            34: 'un quattuortrigintilliard',
            35: 'un quintrigintilliard',
            36: 'un sestrigintilliard',
            37: 'un septentrigintilliard',
            38: 'un octotrigintilliard',
            39: 'un noventrigintilliard',
            40: 'un quadragintilliard',
            50: 'un quinquagintilliard',
            60: 'un sexagintilliard',
            70: 'un septuagintilliard',
            80: 'un octogintilliard',
            90: 'un nonagintilliard',
            100: 'un centilliard',
            101: 'un uncentilliard',
            102: 'un duocentilliard',
            103: 'un trescentilliard',
            110: 'un décicentilliard',
            111: 'un undécicentilliard',
            120: 'un viginticentilliard',
            121: 'un unviginticentilliard',
            130: 'un trigintacentilliard',
            140: 'un quadragintacentilliard',
            150: 'un quinquagintacentilliard',
            160: 'un sexagintacentilliard',
            170: 'un septuagintacentilliard',
            180: 'un octogintacentilliard',
            190: 'un nonagintacentilliard',
            200: 'un ducentilliard',
            300: 'un trecentilliard',
            400: 'un quadringentilliard',
            500: 'un quingentilliard',
            600: 'un sescentilliard',
            700: 'un septingentilliard',
            716: 'un sédéciseptingentilliard',
            717: 'un septendéciseptingentilliard',  # exceeds Python default limit for integer string conversion (4300 digits)
            800: 'un octingentilliard',
            900: 'un nongentilliard',
            998: 'un octononagintanongentilliard',
            999: 'un novénonagintanongentilliard',
            1000: 'un millinilliard',
            1001: 'un millimilliard',
            1010: 'un millidécilliard',
            1011: 'un milliundécilliard',
        })


class EuropeanFrenchMiscNumbersTest(EuropeanFrench, MappedNumbersTest, unittest.TestCase):

    def get_test_data(self) -> tuple[None, dict[int, str]]:
        return (None, {
            111: 'cent-onze',
            142: 'cent-quarante-deux',
            200: 'deux-cents',
            201: 'deux-cent-un',
            900: 'neuf-cents',
            901: 'neuf-cent-un',
            1001: 'mille-un',
            1301: 'mille-trois-cent-un',
            1001001: 'un-million-mille-un',
            1111000: 'un-million-cent-onze-mille',
            80000021: 'quatre-vingts-millions-vingt-et-un',
            80000061: 'quatre-vingts-millions-soixante-et-un',
            80000071: 'quatre-vingts-millions-soixante-et-onze',
            80000080: 'quatre-vingts-millions-quatre-vingts',
            80000081: 'quatre-vingts-millions-quatre-vingt-un',
            80000091: 'quatre-vingts-millions-quatre-vingt-onze',
            1001001001: 'un-milliard-un-million-mille-un',
            1001001001001001: 'un-billiard-un-billion-un-milliard-un-million-mille-un',
            1001001001001001001001001001001001: 'un-quintilliard-un-quintillion-un-quatrilliard-un-quatrillion-un-trilliard-un-trillion-un-billiard-un-billion-un-milliard-un-million-mille-un',
        })


class BelgiumFrenchMiscNumbersTest(BelgiumFrench, MappedNumbersTest, unittest.TestCase):

    def get_test_data(self) -> tuple[None, dict[int, str]]:
        return (None, {
            111: 'cent-onze',
            142: 'cent-quarante-deux',
            200: 'deux-cents',
            201: 'deux-cent-un',
            900: 'neuf-cents',
            901: 'neuf-cent-un',
            1001: 'mille-un',
            1301: 'mille-trois-cent-un',
            1001001: 'un-million-mille-un',
            1111000: 'un-million-cent-onze-mille',
            80000021: 'quatre-vingts-millions-vingt-et-un',
            80000061: 'quatre-vingts-millions-soixante-et-un',
            80000071: 'quatre-vingts-millions-septante-et-un',
            80000080: 'quatre-vingts-millions-quatre-vingts',
            80000081: 'quatre-vingts-millions-quatre-vingt-un',
            80000091: 'quatre-vingts-millions-nonante-et-un',
            1001001001: 'un-milliard-un-million-mille-un',
            1001001001001001: 'un-billiard-un-billion-un-milliard-un-million-mille-un',
            1001001001001001001001001001001001: 'un-quintilliard-un-quintillion-un-quatrilliard-un-quatrillion-un-trilliard-un-trillion-un-billiard-un-billion-un-milliard-un-million-mille-un',
        })


class SwissFrenchMiscNumbersTest(SwissFrench, MappedNumbersTest, unittest.TestCase):

    def get_test_data(self) -> tuple[None, dict[int, str]]:
        return (None, {
            111: 'cent-onze',
            142: 'cent-quarante-deux',
            200: 'deux-cents',
            201: 'deux-cent-un',
            900: 'neuf-cents',
            901: 'neuf-cent-un',
            1001: 'mille-un',
            1301: 'mille-trois-cent-un',
            1001001: 'un-million-mille-un',
            1111000: 'un-million-cent-onze-mille',
            80000021: 'huitante-millions-vingt-et-un',
            80000061: 'huitante-millions-soixante-et-un',
            80000071: 'huitante-millions-septante-et-un',
            80000080: 'huitante-millions-huitante',
            80000081: 'huitante-millions-huitante-et-un',
            80000091: 'huitante-millions-nonante-et-un',
            1001001001: 'un-milliard-un-million-mille-un',
            1001001001001001: 'un-billiard-un-billion-un-milliard-un-million-mille-un',
            1001001001001001001001001001001001: 'un-quintilliard-un-quintillion-un-quatrilliard-un-quatrillion-un-trilliard-un-trillion-un-billiard-un-billion-un-milliard-un-million-mille-un',
        })


class CanadianFrenchMiscNumbersTest(CanadianFrench, MappedNumbersTest, unittest.TestCase):

    def get_test_data(self) -> tuple[None, dict[int, str]]:
        return (None, {
            111: 'cent onze',
            142: 'cent quarante-deux',
            200: 'deux cents',
            201: 'deux cent un',
            900: 'neuf cents',
            901: 'neuf cent un',
            1001: 'mille un',
            1301: 'mille trois cent un',
            1001001: 'un million mille un',
            1111000: 'un million cent onze mille',
            80000021: 'quatre-vingts millions vingt et un',
            80000061: 'quatre-vingts millions soixante et un',
            80000071: 'quatre-vingts millions soixante et onze',
            80000080: 'quatre-vingts millions quatre-vingts',
            80000081: 'quatre-vingts millions quatre-vingt-un',
            80000091: 'quatre-vingts millions quatre-vingt-onze',
            1001001001: 'un milliard un million mille un',
            1001001001001001: 'un billiard un billion un milliard un million mille un',
            1001001001001001001001001001001001: 'un quintilliard un quintillion un quatrilliard un quatrillion un trilliard un trillion un billiard un billion un milliard un million mille un',
        })


class EuropeanPortugueseLargeNumbersTest(EuropeanPortuguese, MappedNumbersTest, unittest.TestCase):

    def get_test_data(self) -> tuple[collections.abc.Callable[[int], int], dict[int, str]]:
        return (lambda n: pow(10, 6*n), {
            1: 'um milião',
            2: 'um bilião',
            3: 'um trilião',
            4: 'um quatrilião',
            5: 'um quintilião',
            6: 'um sextilião',
            7: 'um septilião',
            8: 'um octilião',
            9: 'um nonilião',
            10: 'um decilião',
            11: 'um undecilião',
            12: 'um duodecilião',
            13: 'um tredecilião',
            14: 'um quattuordecilião',
            15: 'um quindecilião',
            16: 'um sedecilião',
            17: 'um septendecilião',
            18: 'um octodecilião',
            19: 'um novendecilião',
            20: 'um vigintilião',
            21: 'um unvigintilião',
            22: 'um duovigintilião',
            23: 'um tresvigintilião',
            24: 'um quattuorvigintilião',
            25: 'um quinvigintilião',
            26: 'um sesvigintilião',
            27: 'um septemvigintilião',
            28: 'um octovigintilião',
            29: 'um novemvigintilião',
            30: 'um trigintilião',
            31: 'um untrigintilião',
            32: 'um duotrigintilião',
            33: 'um trestrigintilião',
            34: 'um quattuortrigintilião',
            35: 'um quintrigintilião',
            36: 'um sestrigintilião',
            37: 'um septentrigintilião',
            38: 'um octotrigintilião',
            39: 'um noventrigintilião',
            40: 'um quadragintilião',
            50: 'um quinquagintilião',
            60: 'um sexagintilião',
            70: 'um septuagintilião',
            80: 'um octogintilião',
            90: 'um nonagintilião',
            100: 'um centilião',
            101: 'um uncentilião',
            102: 'um duocentilião',
            103: 'um trescentilião',
            110: 'um decicentilião',
            111: 'um undecicentilião',
            120: 'um viginticentilião',
            121: 'um unviginticentilião',
            130: 'um trigintacentilião',
            140: 'um quadragintacentilião',
            150: 'um quinquagintacentilião',
            160: 'um sexagintacentilião',
            170: 'um septuagintacentilião',
            180: 'um octogintacentilião',
            190: 'um nonagintacentilião',
            200: 'um ducentilião',
            300: 'um trecentilião',
            400: 'um quadringentilião',
            500: 'um quingentilião',
            600: 'um sescentilião',
            700: 'um septingentilião',
            716: 'um sedeciseptingentilião',
            717: 'um septendeciseptingentilião',  # exceeds Python default limit for integer string conversion (4300 digits)
            800: 'um octingentilião',
            900: 'um nongentilião',
            999: 'um novenonagintanongentilião',
            1000: 'um milinilião',
            1001: 'um milimilião',
            1010: 'um milidecilião',
            1011: 'um miliundecilião',
        })


class EuropeanPortugueseLargeNumbers2Test(EuropeanPortuguese, MappedNumbersTest, unittest.TestCase):

    def get_test_data(self) -> tuple[collections.abc.Callable[[int], int], dict[int, str]]:
        return (lambda n: pow(10, 6*n + 3), {
            1: 'mil miliões',
            2: 'mil biliões',
            3: 'mil triliões',
            4: 'mil quatriliões',
            5: 'mil quintiliões',
            6: 'mil sextiliões',
            7: 'mil septiliões',
            8: 'mil octiliões',
            9: 'mil noniliões',
            10: 'mil deciliões',
            11: 'mil undeciliões',
            12: 'mil duodeciliões',
            13: 'mil tredeciliões',
            14: 'mil quattuordeciliões',
            15: 'mil quindeciliões',
            16: 'mil sedeciliões',
            17: 'mil septendeciliões',
            18: 'mil octodeciliões',
            19: 'mil novendeciliões',
            20: 'mil vigintiliões',
            21: 'mil unvigintiliões',
            22: 'mil duovigintiliões',
            23: 'mil tresvigintiliões',
            24: 'mil quattuorvigintiliões',
            25: 'mil quinvigintiliões',
            26: 'mil sesvigintiliões',
            27: 'mil septemvigintiliões',
            28: 'mil octovigintiliões',
            29: 'mil novemvigintiliões',
            30: 'mil trigintiliões',
            31: 'mil untrigintiliões',
            32: 'mil duotrigintiliões',
            33: 'mil trestrigintiliões',
            34: 'mil quattuortrigintiliões',
            35: 'mil quintrigintiliões',
            36: 'mil sestrigintiliões',
            37: 'mil septentrigintiliões',
            38: 'mil octotrigintiliões',
            39: 'mil noventrigintiliões',
            40: 'mil quadragintiliões',
            50: 'mil quinquagintiliões',
            60: 'mil sexagintiliões',
            70: 'mil septuagintiliões',
            80: 'mil octogintiliões',
            90: 'mil nonagintiliões',
            100: 'mil centiliões',
            101: 'mil uncentiliões',
            102: 'mil duocentiliões',
            103: 'mil trescentiliões',
            110: 'mil decicentiliões',
            111: 'mil undecicentiliões',
            120: 'mil viginticentiliões',
            121: 'mil unviginticentiliões',
            130: 'mil trigintacentiliões',
            140: 'mil quadragintacentiliões',
            150: 'mil quinquagintacentiliões',
            160: 'mil sexagintacentiliões',
            170: 'mil septuagintacentiliões',
            180: 'mil octogintacentiliões',
            190: 'mil nonagintacentiliões',
            200: 'mil ducentiliões',
            300: 'mil trecentiliões',
            400: 'mil quadringentiliões',
            500: 'mil quingentiliões',
            600: 'mil sescentiliões',
            700: 'mil septingentiliões',
            716: 'mil sedeciseptingentiliões',
            717: 'mil septendeciseptingentiliões',  # exceeds Python default limit for integer string conversion (4300 digits)
            800: 'mil octingentiliões',
            900: 'mil nongentiliões',
            998: 'mil octononagintanongentiliões',
            999: 'mil novenonagintanongentiliões',
            1000: 'mil miliniliões',
            1001: 'mil milimiliões',
            1010: 'mil milideciliões',
            1011: 'mil miliundeciliões',
        })


class BrazilianPortugueseLargeNumbersTest(BrazilianPortuguese, MappedNumbersTest, unittest.TestCase):

    def get_test_data(self) -> tuple[collections.abc.Callable[[int], int], dict[int, str]]:
        return (lambda n: pow(10, 3*n + 3), {
            0: 'mil',
            1: 'um milhão',
            2: 'um bilhão',
            3: 'um trilhão',
            4: 'um quatrilhão',
            5: 'um quintilhão',
            6: 'um sextilhão',
            7: 'um septilhão',
            8: 'um octilhão',
            9: 'um nonilhão',
            10: 'um decilhão',
            11: 'um undecilhão',
            12: 'um duodecilhão',
            13: 'um tredecilhão',
            14: 'um quattuordecilhão',
            15: 'um quindecilhão',
            16: 'um sedecilhão',
            17: 'um septendecilhão',
            18: 'um octodecilhão',
            19: 'um novendecilhão',
            20: 'um vigintilhão',
            21: 'um unvigintilhão',
            22: 'um duovigintilhão',
            23: 'um tresvigintilhão',
            24: 'um quattuorvigintilhão',
            25: 'um quinvigintilhão',
            26: 'um sesvigintilhão',
            27: 'um septemvigintilhão',
            28: 'um octovigintilhão',
            29: 'um novemvigintilhão',
            30: 'um trigintilhão',
            31: 'um untrigintilhão',
            32: 'um duotrigintilhão',
            33: 'um trestrigintilhão',
            34: 'um quattuortrigintilhão',
            35: 'um quintrigintilhão',
            36: 'um sestrigintilhão',
            37: 'um septentrigintilhão',
            38: 'um octotrigintilhão',
            39: 'um noventrigintilhão',
            40: 'um quadragintilhão',
            50: 'um quinquagintilhão',
            60: 'um sexagintilhão',
            70: 'um septuagintilhão',
            80: 'um octogintilhão',
            90: 'um nonagintilhão',
            100: 'um centilhão',
            101: 'um uncentilhão',
            102: 'um duocentilhão',
            103: 'um trescentilhão',
            110: 'um decicentilhão',
            111: 'um undecicentilhão',
            120: 'um viginticentilhão',
            121: 'um unviginticentilhão',
            130: 'um trigintacentilhão',
            140: 'um quadragintacentilhão',
            150: 'um quinquagintacentilhão',
            160: 'um sexagintacentilhão',
            170: 'um septuagintacentilhão',
            180: 'um octogintacentilhão',
            190: 'um nonagintacentilhão',
            200: 'um ducentilhão',
            300: 'um trecentilhão',
            400: 'um quadringentilhão',
            500: 'um quingentilhão',
            600: 'um sescentilhão',
            700: 'um septingentilhão',
            800: 'um octingentilhão',
            900: 'um nongentilhão',
            998: 'um octononagintanongentilhão',
            999: 'um novenonagintanongentilhão',
            1000: 'um milinilhão',
            1001: 'um milimilhão',
            1010: 'um milidecilhão',
            1011: 'um miliundecilhão',
        })


class EuropeanPortugueseConjunctionTest(EuropeanPortuguese, MappedNumbersTest, unittest.TestCase):

    def get_test_data(self) -> tuple[None, dict[int, str]]:
        return (None, {
            111: 'cento e onze',
            111001: 'cento e onze mil e um',
            111011: 'cento e onze mil e onze',
            111111: 'cento e onze mil cento e onze',
            111000001: 'cento e onze miliões e um',
            111000011: 'cento e onze miliões e onze',
            111000111: 'cento e onze miliões cento e onze',
            111001000: 'cento e onze miliões e mil',
            111011000: 'cento e onze miliões e onze mil',
            111111000: 'cento e onze miliões cento e onze mil',
            111000001000: 'cento e onze mil miliões e mil',
            111000011000: 'cento e onze mil miliões e onze mil',
            111000111000: 'cento e onze mil miliões cento e onze mil',
        })


class BrazilianPortugueseConjunctionTest(BrazilianPortuguese, MappedNumbersTest, unittest.TestCase):

    def get_test_data(self) -> tuple[None, dict[int, str]]:
        return (None, {
            111: 'cento e onze',
            111001: 'cento e onze mil e um',
            111011: 'cento e onze mil e onze',
            111111: 'cento e onze mil cento e onze',
            111000001: 'cento e onze milhões e um',
            111000011: 'cento e onze milhões e onze',
            111000111: 'cento e onze milhões cento e onze',
            111001000: 'cento e onze milhões e mil',
            111011000: 'cento e onze milhões e onze mil',
            111111000: 'cento e onze milhões cento e onze mil',
            111000001000: 'cento e onze bilhões e mil',
            111000011000: 'cento e onze bilhões e onze mil',
            111000111000: 'cento e onze bilhões cento e onze mil',
        })


class EuropeanPortugueseMiscNumbersTest(EuropeanPortuguese, MappedNumbersTest, unittest.TestCase):

    def get_test_data(self) -> tuple[None, dict[int, str]]:
        return (None, {
            111: 'cento e onze',
            142: 'cento e quarenta e dois',
            200: 'duzentos',
            1001: 'mil e um',
            1002: 'mil e dois',
            1020: 'mil e vinte',
            1200: 'mil e duzentos',
            1220: 'mil duzentos e vinte',
            1222: 'mil duzentos e vinte e dois',
            1301: 'mil trezentos e um',
            3342: 'três mil trezentos e quarenta e dois',
            1000001: 'um milião e um',
            1000010: 'um milião e dez',
            1000100: 'um milião e cem',
            1001000: 'um milião e mil',
            1010000: 'um milião e dez mil',
            1100000: 'um milião e cem mil',
            1110000: 'um milião cento e dez mil',
            1111000: 'um milião cento e onze mil',
            1111100: 'um milião cento e onze mil e cem',
            1111110: 'um milião cento e onze mil cento e dez',
            80000021: 'oitenta miliões e vinte e um',
            80000080: 'oitenta miliões e oitenta',
            1001001001001001: 'mil biliões um bilião mil miliões um milião mil e um',
            1001001001001001001001001001001001: 'mil quintiliões um quintilião mil quatriliões um quatrilião mil triliões um trilião mil biliões um bilião mil miliões um milião mil e um',
        })


class BrazilianPortugueseMiscNumbersTest(BrazilianPortuguese, MappedNumbersTest, unittest.TestCase):

    def get_test_data(self) -> tuple[None, dict[int, str]]:
        return (None, {
            111: 'cento e onze',
            142: 'cento e quarenta e dois',
            200: 'duzentos',
            1001: 'mil e um',
            1002: 'mil e dois',
            1020: 'mil e vinte',
            1200: 'mil e duzentos',
            1220: 'mil duzentos e vinte',
            1222: 'mil duzentos e vinte e dois',
            1301: 'mil trezentos e um',
            3342: 'três mil trezentos e quarenta e dois',
            1000001: 'um milhão e um',
            1000010: 'um milhão e dez',
            1000100: 'um milhão e cem',
            1001000: 'um milhão e mil',
            1010000: 'um milhão e dez mil',
            1100000: 'um milhão e cem mil',
            1110000: 'um milhão cento e dez mil',
            1111000: 'um milhão cento e onze mil',
            1111100: 'um milhão cento e onze mil e cem',
            1111110: 'um milhão cento e onze mil cento e dez',
            80000021: 'oitenta milhões e vinte e um',
            80000080: 'oitenta milhões e oitenta',
            1001001001001001: 'um quatrilhão um trilhão um bilhão um milhão mil e um',
            1001001001001001001001001001001001: 'um decilhão um nonilhão um octilhão um septilhão um sextilhão um quintilhão um quatrilhão um trilhão um bilhão um milhão mil e um',
        })


if __name__ == '__main__':
    unittest.main()
